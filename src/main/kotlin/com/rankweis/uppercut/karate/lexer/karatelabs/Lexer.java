// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: js.flex

/*
 * The MIT License
 *
 * Copyright 2024 Karate Labs Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.rankweis.uppercut.karate.lexer.karatelabs;

import static io.karatelabs.js.Token.AMP;
import static io.karatelabs.js.Token.AMP_AMP;
import static io.karatelabs.js.Token.AMP_AMP_EQ;
import static io.karatelabs.js.Token.AMP_EQ;
import static io.karatelabs.js.Token.BACKTICK;
import static io.karatelabs.js.Token.BREAK;
import static io.karatelabs.js.Token.B_COMMENT;
import static io.karatelabs.js.Token.CARET;
import static io.karatelabs.js.Token.CARET_EQ;
import static io.karatelabs.js.Token.CASE;
import static io.karatelabs.js.Token.CATCH;
import static io.karatelabs.js.Token.COLON;
import static io.karatelabs.js.Token.COMMA;
import static io.karatelabs.js.Token.CONST;
import static io.karatelabs.js.Token.DEFAULT;
import static io.karatelabs.js.Token.DELETE;
import static io.karatelabs.js.Token.DO;
import static io.karatelabs.js.Token.DOLLAR_L_CURLY;
import static io.karatelabs.js.Token.DOT;
import static io.karatelabs.js.Token.DOT_DOT_DOT;
import static io.karatelabs.js.Token.D_STRING;
import static io.karatelabs.js.Token.ELSE;
import static io.karatelabs.js.Token.EQ;
import static io.karatelabs.js.Token.EQ_EQ;
import static io.karatelabs.js.Token.EQ_EQ_EQ;
import static io.karatelabs.js.Token.EQ_GT;
import static io.karatelabs.js.Token.FALSE;
import static io.karatelabs.js.Token.FINALLY;
import static io.karatelabs.js.Token.FOR;
import static io.karatelabs.js.Token.FUNCTION;
import static io.karatelabs.js.Token.GT;
import static io.karatelabs.js.Token.GT_EQ;
import static io.karatelabs.js.Token.GT_GT;
import static io.karatelabs.js.Token.GT_GT_EQ;
import static io.karatelabs.js.Token.GT_GT_GT;
import static io.karatelabs.js.Token.GT_GT_GT_EQ;
import static io.karatelabs.js.Token.IDENT;
import static io.karatelabs.js.Token.IF;
import static io.karatelabs.js.Token.IN;
import static io.karatelabs.js.Token.INSTANCEOF;
import static io.karatelabs.js.Token.LET;
import static io.karatelabs.js.Token.LT;
import static io.karatelabs.js.Token.LT_EQ;
import static io.karatelabs.js.Token.LT_LT;
import static io.karatelabs.js.Token.LT_LT_EQ;
import static io.karatelabs.js.Token.L_BRACKET;
import static io.karatelabs.js.Token.L_COMMENT;
import static io.karatelabs.js.Token.L_CURLY;
import static io.karatelabs.js.Token.L_PAREN;
import static io.karatelabs.js.Token.MINUS;
import static io.karatelabs.js.Token.MINUS_EQ;
import static io.karatelabs.js.Token.MINUS_MINUS;
import static io.karatelabs.js.Token.NEW;
import static io.karatelabs.js.Token.NOT;
import static io.karatelabs.js.Token.NOT_EQ;
import static io.karatelabs.js.Token.NOT_EQ_EQ;
import static io.karatelabs.js.Token.NULL;
import static io.karatelabs.js.Token.NUMBER;
import static io.karatelabs.js.Token.OF;
import static io.karatelabs.js.Token.PERCENT;
import static io.karatelabs.js.Token.PERCENT_EQ;
import static io.karatelabs.js.Token.PIPE;
import static io.karatelabs.js.Token.PIPE_EQ;
import static io.karatelabs.js.Token.PIPE_PIPE;
import static io.karatelabs.js.Token.PIPE_PIPE_EQ;
import static io.karatelabs.js.Token.PLUS;
import static io.karatelabs.js.Token.PLUS_EQ;
import static io.karatelabs.js.Token.PLUS_PLUS;
import static io.karatelabs.js.Token.QUES;
import static io.karatelabs.js.Token.QUES_QUES;
import static io.karatelabs.js.Token.RETURN;
import static io.karatelabs.js.Token.R_BRACKET;
import static io.karatelabs.js.Token.R_CURLY;
import static io.karatelabs.js.Token.R_PAREN;
import static io.karatelabs.js.Token.SEMI;
import static io.karatelabs.js.Token.SLASH;
import static io.karatelabs.js.Token.SLASH_EQ;
import static io.karatelabs.js.Token.STAR;
import static io.karatelabs.js.Token.STAR_EQ;
import static io.karatelabs.js.Token.STAR_STAR;
import static io.karatelabs.js.Token.STAR_STAR_EQ;
import static io.karatelabs.js.Token.SWITCH;
import static io.karatelabs.js.Token.S_STRING;
import static io.karatelabs.js.Token.THROW;
import static io.karatelabs.js.Token.TILDE;
import static io.karatelabs.js.Token.TRUE;
import static io.karatelabs.js.Token.TRY;
import static io.karatelabs.js.Token.TYPEOF;
import static io.karatelabs.js.Token.T_STRING;
import static io.karatelabs.js.Token.VAR;
import static io.karatelabs.js.Token.WHILE;
import static io.karatelabs.js.Token.WS;
import static io.karatelabs.js.Token.WS_LF;

import io.karatelabs.js.Token;
import java.util.ArrayDeque;

class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEMPLATE = 2;
  public static final int PLACEHOLDER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\14\u1f00\2\u0100\1\u7b00"+
    "\5\u1f00\23\u0100\1\u7c00\17\u0100\1\u7d00\u0adc\u1f00\1\u7e00\1\u7f00"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\16\0\4\5\1\1"+
    "\1\6\1\7\1\5\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\11\25\1\26\1\27\1\30\1\31\1\32\1\33\1\5"+
    "\4\34\1\35\1\34\21\36\1\37\2\36\1\40\1\5"+
    "\1\41\1\42\1\36\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\36\1\52\1\53\1\36\1\54\1\55"+
    "\1\36\1\56\1\57\1\60\1\36\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\37\1\67\1\36\1\70\1\71"+
    "\1\72\1\73\6\0\1\74\32\0\2\5\4\36\4\5"+
    "\1\36\2\5\1\0\7\5\1\36\4\5\1\36\5\5"+
    "\27\36\1\5\37\36\1\5\u01ca\36\4\5\14\36\16\5"+
    "\5\36\7\5\1\36\1\5\1\36\21\5\160\0\5\36"+
    "\1\5\2\36\2\5\4\36\1\5\1\36\6\5\1\36"+
    "\1\5\3\36\1\5\1\36\1\5\24\36\1\5\123\36"+
    "\1\5\213\36\1\5\5\0\2\5\246\36\1\5\46\36"+
    "\2\5\1\36\6\5\51\36\6\5\1\36\1\5\55\0"+
    "\1\5\1\0\1\5\2\0\1\5\2\0\1\5\1\0"+
    "\10\5\33\36\4\5\4\36\15\5\6\0\5\5\1\36"+
    "\4\5\13\0\1\5\1\0\3\5\53\36\37\0\4\5"+
    "\2\36\1\0\143\36\1\5\1\36\10\0\1\5\6\0"+
    "\2\36\2\0\1\5\4\0\2\36\12\0\3\36\2\5"+
    "\1\36\17\5\1\0\1\36\1\0\36\36\33\0\2\5"+
    "\131\36\13\0\1\36\16\5\12\0\41\36\11\0\2\36"+
    "\4\5\1\36\2\5\1\0\30\36\4\0\1\36\11\0"+
    "\1\36\3\0\1\36\5\0\22\5\31\36\3\0\4\5"+
    "\13\36\5\5\30\36\1\5\6\36\1\5\2\0\6\5"+
    "\10\0\52\36\72\0\66\36\3\0\1\36\22\0\1\36"+
    "\7\0\12\36\2\0\2\5\12\0\1\5\20\36\3\0"+
    "\1\5\10\36\2\5\2\36\2\5\26\36\1\5\7\36"+
    "\1\5\1\36\3\5\4\36\2\5\1\0\1\36\7\0"+
    "\2\5\2\0\2\5\3\0\1\36\10\5\1\0\4\5"+
    "\2\36\1\5\3\36\2\0\2\5\12\0\4\36\7\5"+
    "\2\36\1\5\1\0\2\5\3\0\1\5\6\36\4\5"+
    "\2\36\2\5\26\36\1\5\7\36\1\5\2\36\1\5"+
    "\2\36\1\5\2\36\2\5\1\0\1\5\5\0\4\5"+
    "\2\0\2\5\3\0\3\5\1\0\7\5\4\36\1\5"+
    "\1\36\7\5\14\0\3\36\1\0\13\5\3\0\1\5"+
    "\11\36\1\5\3\36\1\5\26\36\1\5\7\36\1\5"+
    "\2\36\1\5\5\36\2\5\1\0\1\36\10\0\1\5"+
    "\3\0\1\5\3\0\2\5\1\36\17\5\2\36\2\0"+
    "\2\5\12\0\1\5\1\36\7\5\1\36\6\0\1\5"+
    "\3\0\1\5\10\36\2\5\2\36\2\5\26\36\1\5"+
    "\7\36\1\5\2\36\1\5\5\36\2\5\1\0\1\36"+
    "\7\0\2\5\2\0\2\5\3\0\7\5\3\0\4\5"+
    "\2\36\1\5\3\36\2\0\2\5\12\0\1\5\1\36"+
    "\20\5\1\0\1\36\1\5\6\36\3\5\3\36\1\5"+
    "\4\36\3\5\2\36\1\5\1\36\1\5\2\36\3\5"+
    "\2\36\3\5\3\36\3\5\14\36\4\5\5\0\3\5"+
    "\3\0\1\5\4\0\2\5\1\36\6\5\1\0\16\5"+
    "\12\0\11\5\1\36\6\5\5\0\10\36\1\5\3\36"+
    "\1\5\27\36\1\5\20\36\2\5\1\0\1\36\7\0"+
    "\1\5\3\0\1\5\4\0\7\5\2\0\1\5\3\36"+
    "\2\5\1\36\2\5\2\36\2\0\2\5\12\0\20\5"+
    "\1\36\3\0\1\5\10\36\1\5\3\36\1\5\27\36"+
    "\1\5\12\36\1\5\5\36\2\5\1\0\1\36\7\0"+
    "\1\5\3\0\1\5\4\0\7\5\2\0\6\5\2\36"+
    "\1\5\2\36\2\0\2\5\12\0\1\5\2\36\1\0"+
    "\14\5\4\0\11\36\1\5\3\36\1\5\51\36\2\0"+
    "\1\36\7\0\1\5\3\0\1\5\4\0\1\36\5\5"+
    "\3\36\1\0\7\5\3\36\2\0\2\5\12\0\12\5"+
    "\6\36\1\5\3\0\1\5\22\36\3\5\30\36\1\5"+
    "\11\36\1\5\1\36\2\5\7\36\3\5\1\0\4\5"+
    "\6\0\1\5\1\0\1\5\10\0\6\5\12\0\2\5"+
    "\2\0\15\5\60\36\1\0\2\36\7\0\4\5\10\36"+
    "\10\0\1\5\12\0\47\5\2\36\1\5\1\36\1\5"+
    "\5\36\1\5\30\36\1\5\1\36\1\5\12\36\1\0"+
    "\2\36\11\0\1\36\2\5\5\36\1\5\1\36\1\5"+
    "\7\0\1\5\12\0\2\5\4\36\40\5\1\36\27\5"+
    "\2\0\6\5\12\0\13\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\2\0\10\36\1\5\44\36\4\5\24\0"+
    "\1\5\2\0\5\36\13\0\1\5\44\0\11\5\1\0"+
    "\71\5\53\36\24\0\1\36\12\0\6\5\6\36\4\0"+
    "\4\36\3\0\1\36\3\0\2\36\7\0\3\36\4\0"+
    "\15\36\14\0\1\36\17\0\2\5\46\36\1\5\1\36"+
    "\5\5\1\36\2\5\53\36\1\5\115\36\1\5\4\36"+
    "\2\5\7\36\1\5\1\36\1\5\4\36\2\5\51\36"+
    "\1\5\4\36\2\5\41\36\1\5\4\36\2\5\7\36"+
    "\1\5\1\36\1\5\4\36\2\5\17\36\1\5\71\36"+
    "\1\5\4\36\2\5\103\36\2\5\3\0\40\5\20\36"+
    "\20\5\126\36\2\5\6\36\3\5\u016c\36\2\5\21\36"+
    "\1\5\32\36\5\5\113\36\3\5\13\36\7\5\22\36"+
    "\4\0\11\5\23\36\3\0\13\5\22\36\2\0\14\5"+
    "\15\36\1\5\3\36\1\5\2\0\14\5\64\36\40\0"+
    "\3\5\1\36\3\5\2\36\1\0\2\5\12\0\41\5"+
    "\17\0\6\5\131\36\7\5\5\36\2\0\42\36\1\0"+
    "\1\36\5\5\106\36\12\5\37\36\1\5\14\0\4\5"+
    "\14\0\12\5\12\0\36\36\2\5\5\36\13\5\54\36"+
    "\4\5\32\36\6\5\12\0\46\5\27\36\5\0\4\5"+
    "\65\36\12\0\1\5\35\0\2\5\13\0\6\5\12\0"+
    "\15\5\1\36\10\5\16\0\1\5\20\0\61\5\5\0"+
    "\57\36\21\0\10\36\3\5\12\0\21\5\11\0\14\5"+
    "\3\0\36\36\15\0\2\36\12\0\54\36\16\0\14\5"+
    "\44\36\24\0\10\5\12\0\3\5\3\36\12\0\44\36"+
    "\2\5\11\36\7\5\53\36\2\5\3\36\20\5\3\0"+
    "\1\5\25\0\4\36\1\0\6\36\1\0\2\36\3\0"+
    "\1\36\5\5\300\36\100\0\26\36\2\5\6\36\2\5"+
    "\46\36\2\5\6\36\2\5\10\36\1\5\1\36\1\5"+
    "\1\36\1\5\1\36\1\5\37\36\2\5\65\36\1\5"+
    "\7\36\1\5\1\36\3\5\3\36\1\5\7\36\3\5"+
    "\4\36\2\5\6\36\4\5\15\36\5\5\3\36\1\5"+
    "\7\36\16\5\5\0\30\5\2\3\5\0\20\5\2\36"+
    "\23\5\1\36\13\5\5\0\1\5\12\0\1\5\1\36"+
    "\15\5\1\36\20\5\15\36\3\5\41\36\17\5\15\0"+
    "\4\5\1\0\3\5\14\0\21\5\1\36\4\5\1\36"+
    "\2\5\12\36\1\5\1\36\3\5\5\36\6\5\1\36"+
    "\1\5\1\36\1\5\1\36\1\5\4\36\1\5\13\36"+
    "\2\5\4\36\5\5\5\36\4\5\1\36\21\5\51\36"+
    "\u0177\5\345\36\6\5\4\36\3\0\2\36\14\5\46\36"+
    "\1\5\1\36\5\5\1\36\2\5\70\36\7\5\1\36"+
    "\17\5\1\0\27\36\11\5\7\36\1\5\7\36\1\5"+
    "\7\36\1\5\7\36\1\5\7\36\1\5\7\36\1\5"+
    "\7\36\1\5\7\36\1\5\40\0\57\5\1\36\325\5"+
    "\3\36\31\5\11\36\6\0\1\5\5\36\2\5\5\36"+
    "\4\5\126\36\2\5\2\0\2\5\3\36\1\5\132\36"+
    "\1\5\4\36\5\5\53\36\1\5\136\36\21\5\40\36"+
    "\60\5\320\36\100\5\215\36\103\5\56\36\2\5\15\36"+
    "\3\5\20\36\12\0\2\36\24\5\57\36\1\0\4\5"+
    "\12\0\1\5\37\36\2\0\120\36\2\0\45\5\11\36"+
    "\2\5\147\36\2\5\100\36\5\5\2\36\1\5\1\36"+
    "\1\5\5\36\30\5\20\36\1\0\3\36\1\0\4\36"+
    "\1\0\27\36\5\0\4\5\1\0\13\5\1\36\7\5"+
    "\64\36\14\5\2\0\62\36\22\0\12\5\12\0\6\5"+
    "\22\0\6\36\3\5\1\36\1\5\2\36\13\0\34\36"+
    "\10\0\2\5\27\36\15\0\14\5\35\36\3\5\4\0"+
    "\57\36\16\0\16\5\1\36\12\0\6\5\5\36\1\0"+
    "\12\36\12\0\5\36\1\5\51\36\16\0\11\5\3\36"+
    "\1\0\10\36\2\0\2\5\12\0\6\5\27\36\3\5"+
    "\1\36\3\0\62\36\1\0\1\36\3\0\2\36\2\0"+
    "\5\36\2\0\1\36\1\0\1\36\30\5\3\36\2\5"+
    "\13\36\5\0\2\5\3\36\2\0\12\5\6\36\2\5"+
    "\6\36\2\5\6\36\11\5\7\36\1\5\7\36\1\5"+
    "\53\36\1\5\16\36\6\5\163\36\10\0\1\5\2\0"+
    "\2\5\12\0\6\5\244\36\14\5\27\36\4\5\61\36"+
    "\4\5\u0100\75\156\36\2\5\152\36\46\5\7\36\14\5"+
    "\5\36\5\5\1\36\1\0\12\36\1\5\15\36\1\5"+
    "\5\36\1\5\1\36\1\5\2\36\1\5\2\36\1\5"+
    "\154\36\41\5\153\36\22\5\100\36\2\5\66\36\50\5"+
    "\15\36\3\5\20\0\20\5\20\0\3\5\2\36\30\5"+
    "\3\36\31\5\1\36\6\5\5\36\1\5\207\36\2\5"+
    "\1\0\4\5\1\36\13\5\12\0\7\5\32\36\4\5"+
    "\1\36\1\5\32\36\13\5\131\36\3\5\6\36\2\5"+
    "\6\36\2\5\6\36\2\5\3\36\3\5\2\36\3\5"+
    "\2\36\22\5\3\0\4\5\14\36\1\5\32\36\1\5"+
    "\23\36\1\5\2\36\1\5\17\36\2\5\16\36\42\5"+
    "\173\36\105\5\65\36\210\5\1\0\202\5\35\36\3\5"+
    "\61\36\17\5\1\0\37\5\40\36\15\5\36\36\5\5"+
    "\46\36\5\0\5\5\36\36\2\5\44\36\4\5\10\36"+
    "\1\5\5\36\52\5\236\36\2\5\12\0\6\5\44\36"+
    "\4\5\44\36\4\5\50\36\10\5\64\36\14\5\13\36"+
    "\1\5\17\36\1\5\7\36\1\5\2\36\1\5\13\36"+
    "\1\5\17\36\1\5\7\36\1\5\2\36\103\5\67\36"+
    "\11\5\26\36\12\5\10\36\30\5\6\36\1\5\52\36"+
    "\1\5\11\36\105\5\6\36\2\5\1\36\1\5\54\36"+
    "\1\5\2\36\3\5\1\36\2\5\27\36\12\5\27\36"+
    "\11\5\37\36\101\5\23\36\1\5\2\36\12\5\26\36"+
    "\12\5\32\36\106\5\70\36\6\5\2\36\100\5\1\36"+
    "\3\0\1\5\2\0\5\5\4\0\4\36\1\5\3\36"+
    "\1\5\35\36\2\5\3\0\4\5\1\0\40\5\35\36"+
    "\3\5\35\36\43\5\10\36\1\5\34\36\2\0\31\5"+
    "\66\36\12\5\26\36\12\5\23\36\15\5\22\36\156\5"+
    "\111\36\67\5\63\36\15\5\63\36\15\5\44\36\4\0"+
    "\10\5\12\0\u0146\5\52\36\1\5\2\0\3\5\2\36"+
    "\113\5\3\0\35\36\12\5\1\36\10\5\26\36\13\0"+
    "\37\5\22\36\4\0\52\5\25\36\33\5\27\36\11\5"+
    "\3\0\65\36\17\0\37\5\13\0\2\36\2\0\1\36"+
    "\11\5\4\0\55\36\13\0\2\5\1\0\4\5\1\0"+
    "\12\5\1\0\2\5\31\36\7\5\12\0\6\5\3\0"+
    "\44\36\16\0\1\5\12\0\4\5\1\36\2\0\1\36"+
    "\10\5\43\36\1\0\2\5\1\36\11\5\3\0\60\36"+
    "\16\0\4\36\4\5\4\0\1\5\14\0\1\36\1\5"+
    "\1\36\43\5\22\36\1\5\31\36\14\0\6\5\1\0"+
    "\2\36\1\0\76\5\7\36\1\5\1\36\1\5\4\36"+
    "\1\5\17\36\1\5\12\36\7\5\57\36\14\0\5\5"+
    "\12\0\6\5\4\0\1\5\10\36\2\5\2\36\2\5"+
    "\26\36\1\5\7\36\1\5\2\36\1\5\5\36\1\5"+
    "\2\0\1\36\7\0\2\5\2\0\2\5\3\0\2\5"+
    "\1\36\6\5\1\0\5\5\5\36\2\0\2\5\7\0"+
    "\3\5\5\0\213\5\65\36\22\0\4\36\5\5\12\0"+
    "\4\5\1\0\3\36\36\5\60\36\24\0\2\36\1\5"+
    "\1\36\10\5\12\0\246\5\57\36\7\0\2\5\11\0"+
    "\27\5\4\36\2\0\42\5\60\36\21\0\3\5\1\36"+
    "\13\5\12\0\46\5\53\36\15\0\1\36\7\5\12\0"+
    "\66\5\33\36\2\5\17\0\4\5\12\0\6\5\7\36"+
    "\271\5\54\36\17\0\145\5\100\36\12\0\25\5\10\36"+
    "\2\5\1\36\2\5\10\36\1\5\2\36\1\5\30\36"+
    "\6\0\1\5\2\0\2\5\4\0\1\36\1\0\1\36"+
    "\2\0\14\5\12\0\106\5\10\36\2\5\47\36\7\0"+
    "\2\5\7\0\1\36\1\5\1\36\1\0\33\5\1\36"+
    "\12\0\50\36\7\0\1\36\4\0\10\5\1\0\10\5"+
    "\1\36\13\0\56\36\20\0\3\5\1\36\22\5\111\36"+
    "\7\5\11\36\1\5\45\36\10\0\1\5\10\0\1\36"+
    "\17\5\12\0\30\5\36\36\2\5\26\0\1\5\16\0"+
    "\111\5\7\36\1\5\2\36\1\5\46\36\6\0\3\5"+
    "\1\0\1\5\2\0\1\5\7\0\1\36\1\0\10\5"+
    "\12\0\6\5\6\36\1\5\2\36\1\5\40\36\5\0"+
    "\1\5\2\0\1\5\5\0\1\36\7\5\12\0\u0136\5"+
    "\23\36\4\0\11\5\2\0\1\36\1\0\15\36\1\5"+
    "\42\36\7\0\3\5\5\0\15\5\12\0\126\5\1\36"+
    "\54\5\4\36\37\5\232\36\146\5\157\36\21\5\304\36"+
    "\u014c\5\141\36\17\5\60\36\21\0\6\36\17\0\252\5"+
    "\107\36\271\5\71\36\7\5\37\36\1\5\12\0\6\5"+
    "\117\36\1\5\12\0\6\5\36\36\2\5\5\0\13\5"+
    "\60\36\7\0\11\5\4\36\14\5\12\0\11\5\25\36"+
    "\5\5\23\36\260\5\100\36\200\5\113\36\4\5\1\0"+
    "\1\36\67\0\7\5\4\0\15\36\100\5\2\36\1\5"+
    "\1\36\1\0\13\5\2\0\16\5\370\36\10\5\326\36"+
    "\52\5\11\36\u01e7\5\4\36\1\5\7\36\1\5\2\36"+
    "\1\5\43\36\17\5\1\36\35\5\3\36\2\5\1\36"+
    "\16\5\4\36\10\5\u018c\36\4\5\153\36\5\5\15\36"+
    "\3\5\11\36\7\5\12\36\3\5\2\0\1\5\4\0"+
    "\134\5\56\0\2\5\27\0\u011e\5\5\0\3\5\26\0"+
    "\2\5\7\0\36\5\4\0\224\5\3\0\273\5\125\36"+
    "\1\5\107\36\1\5\2\36\2\5\1\36\2\5\2\36"+
    "\2\5\4\36\1\5\14\36\1\5\1\36\1\5\7\36"+
    "\1\5\101\36\1\5\4\36\2\5\10\36\1\5\7\36"+
    "\1\5\34\36\1\5\4\36\1\5\5\36\1\5\1\36"+
    "\3\5\7\36\1\5\u0154\36\2\5\31\36\1\5\31\36"+
    "\1\5\37\36\1\5\31\36\1\5\37\36\1\5\31\36"+
    "\1\5\37\36\1\5\31\36\1\5\37\36\1\5\31\36"+
    "\1\5\10\36\2\5\151\0\4\5\62\0\10\5\1\0"+
    "\16\5\1\0\26\5\5\0\1\5\17\0\120\5\37\36"+
    "\6\5\6\36\325\5\7\0\1\5\21\0\2\5\7\0"+
    "\1\5\2\0\1\5\5\0\5\5\76\36\41\5\1\0"+
    "\160\5\55\36\3\5\7\0\7\36\2\5\12\0\4\5"+
    "\1\36\u0141\5\36\36\1\0\21\5\54\36\16\0\5\5"+
    "\1\36\320\5\34\36\16\0\346\5\7\36\1\5\4\36"+
    "\1\5\2\36\1\5\17\36\1\5\305\36\13\5\7\0"+
    "\51\5\104\36\7\0\1\36\4\5\12\0\u0156\5\1\36"+
    "\117\5\4\36\1\5\33\36\1\5\2\36\1\5\1\36"+
    "\2\5\1\36\1\5\12\36\1\5\4\36\1\5\1\36"+
    "\1\5\1\36\6\5\1\36\4\5\1\36\1\5\1\36"+
    "\1\5\1\36\1\5\3\36\1\5\2\36\1\5\1\36"+
    "\2\5\1\36\1\5\1\36\1\5\1\36\1\5\1\36"+
    "\1\5\1\36\1\5\2\36\1\5\1\36\2\5\4\36"+
    "\1\5\7\36\1\5\4\36\1\5\4\36\1\5\1\36"+
    "\1\5\12\36\1\5\21\36\5\5\3\36\1\5\5\36"+
    "\1\5\21\36\u0134\5\12\0\6\5\340\36\40\5\72\36"+
    "\6\5\336\36\2\5\u0182\36\16\5\u0131\36\37\5\36\36"+
    "\342\5\113\36\5\5\u0160\36\121\5\1\0\36\5\140\0"+
    "\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\16\5\1\34\1\35\1\36"+
    "\1\37\1\40\1\0\1\41\1\42\1\43\1\4\1\44"+
    "\1\45\1\46\1\10\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\0\1\21\1\55\1\56\1\57\1\0\2\21"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\4\5\1\70\5\5\1\71\1\72\3\5\1\73\7\5"+
    "\1\74\1\75\1\0\1\76\1\77\1\100\1\101\1\102"+
    "\1\0\1\21\1\103\1\104\1\105\1\106\11\5\1\107"+
    "\2\5\1\110\1\111\5\5\1\112\1\5\1\113\1\5"+
    "\1\114\1\40\1\55\1\115\1\5\1\116\4\5\1\117"+
    "\4\5\1\120\3\5\1\121\2\5\1\122\1\123\1\124"+
    "\2\5\1\125\5\5\1\126\1\5\1\127\1\5\1\130"+
    "\3\5\1\131\1\132\1\133\1\134\1\135\2\5\1\136"+
    "\2\5\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u02e8\0\u0326\0\u0364"+
    "\0\u02e8\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u02e8\0\u02e8"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u02e8\0\u02e8\0\u05d0\0\u02e8"+
    "\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0"+
    "\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u02e8\0\u0972"+
    "\0\u02e8\0\u02e8\0\u09b0\0\u09ee\0\u02e8\0\u02e8\0\u0a2c\0\u02e8"+
    "\0\u02e8\0\u0a6a\0\u02e8\0\u02e8\0\u0aa8\0\u02e8\0\u02e8\0\u02e8"+
    "\0\u02e8\0\u02e8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u02e8\0\u0bde"+
    "\0\u0c1c\0\u0c5a\0\u0c98\0\u02e8\0\u0cd6\0\u02e8\0\u02e8\0\u0d14"+
    "\0\u02e8\0\u02e8\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u01f0\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u01f0\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u01f0\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u11ec\0\u02e8\0\u122a\0\u1268\0\u02e8\0\u02e8\0\u02e8\0\u02e8"+
    "\0\u02e8\0\u12a6\0\u12e4\0\u02e8\0\u02e8\0\u02e8\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550"+
    "\0\u01f0\0\u158e\0\u15cc\0\u01f0\0\u01f0\0\u160a\0\u1648\0\u1686"+
    "\0\u16c4\0\u1702\0\u01f0\0\u1740\0\u01f0\0\u177e\0\u02e8\0\u02e8"+
    "\0\u02e8\0\u02e8\0\u17bc\0\u01f0\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u01f0\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u01f0\0\u19ea\0\u1a28"+
    "\0\u1a66\0\u01f0\0\u1aa4\0\u1ae2\0\u01f0\0\u01f0\0\u01f0\0\u1b20"+
    "\0\u1b5e\0\u01f0\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u01f0"+
    "\0\u1cd2\0\u01f0\0\u1d10\0\u01f0\0\u1d4e\0\u1d8c\0\u1dca\0\u01f0"+
    "\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u1e08\0\u1e46\0\u01f0\0\u1e84"+
    "\0\u1ec2\0\u01f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\2\5\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\4\11\1\35\1\36\1\37\1\40"+
    "\1\11\1\41\1\42\1\43\1\44\1\45\1\11\1\46"+
    "\1\11\1\47\1\50\1\51\1\11\1\52\1\53\1\54"+
    "\1\11\1\55\1\56\1\11\1\57\1\60\1\61\1\62"+
    "\1\5\1\0\10\63\1\64\32\63\1\65\32\63\1\0"+
    "\1\4\2\5\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\4\11\1\35\1\36\1\37\1\40\1\11"+
    "\1\41\1\42\1\43\1\44\1\45\1\11\1\46\1\11"+
    "\1\47\1\50\1\51\1\11\1\52\1\53\1\54\1\11"+
    "\1\55\1\56\1\11\1\57\1\60\1\66\1\62\1\5"+
    "\2\0\1\4\2\5\1\6\67\0\1\5\2\0\1\5"+
    "\75\0\2\5\124\0\1\67\44\0\7\10\1\70\66\10"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\24\11\4\0\1\11\32\0\1\71\56\0\1\72\16\0"+
    "\1\73\44\0\13\14\1\74\62\14\114\0\1\75\12\0"+
    "\1\76\63\0\1\77\11\0\1\100\65\0\1\101\7\0"+
    "\1\102\66\0\1\103\1\0\2\104\66\0\1\105\4\0"+
    "\1\106\5\0\1\107\66\0\1\110\1\0\2\26\7\0"+
    "\1\111\1\0\1\112\10\0\1\111\47\0\1\110\1\0"+
    "\2\26\7\0\1\111\12\0\1\111\55\0\1\113\1\114"+
    "\75\0\1\115\1\116\74\0\1\117\1\120\76\0\1\121"+
    "\73\0\1\122\44\0\1\11\7\0\1\11\13\0\2\11"+
    "\6\0\4\11\4\0\15\11\1\123\6\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\1\124\12\11\1\125\10\11\4\0\1\11\1\0"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\4\11\1\126\6\11\1\127\10\11\4\0\1\11\1\0"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\11\11\1\130\12\11\4\0\1\11\1\0\1\11\7\0"+
    "\1\11\13\0\2\11\6\0\4\11\4\0\1\131\6\11"+
    "\1\132\3\11\1\133\4\11\1\134\3\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\5\11\1\135\4\11\1\136\11\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\4\11\1\137\17\11\4\0\1\11\1\0\1\11"+
    "\7\0\1\11\13\0\2\11\6\0\4\11\4\0\4\11"+
    "\1\140\13\11\1\141\3\11\4\0\1\11\1\0\1\11"+
    "\7\0\1\11\13\0\2\11\6\0\4\11\4\0\5\11"+
    "\1\142\16\11\4\0\1\11\1\0\1\11\7\0\1\11"+
    "\13\0\2\11\6\0\4\11\4\0\4\11\1\143\17\11"+
    "\4\0\1\11\1\0\1\11\7\0\1\11\13\0\2\11"+
    "\6\0\4\11\4\0\22\11\1\144\1\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\6\11\1\145\6\11\1\146\5\11\1\147\4\0"+
    "\1\11\1\0\1\11\7\0\1\11\13\0\2\11\6\0"+
    "\4\11\4\0\1\150\23\11\4\0\1\11\1\0\1\11"+
    "\7\0\1\11\13\0\2\11\6\0\4\11\4\0\6\11"+
    "\1\151\15\11\4\0\1\11\32\0\1\152\37\0\1\153"+
    "\4\0\10\63\1\154\32\63\1\0\32\63\70\0\1\155"+
    "\36\0\1\156\75\0\1\157\75\0\1\160\66\0\1\161"+
    "\77\0\2\104\7\0\1\111\12\0\1\111\25\0\16\105"+
    "\1\162\57\105\2\106\3\0\67\106\26\0\2\104\67\0"+
    "\1\163\1\0\1\163\2\0\2\163\74\0\2\112\6\0"+
    "\2\112\6\0\6\112\55\0\1\164\75\0\1\165\75\0"+
    "\1\166\1\167\43\0\1\11\7\0\1\11\13\0\2\11"+
    "\6\0\4\11\4\0\4\11\1\170\17\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\16\11\1\171\1\172\4\11\4\0\1\11\1\0"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\12\11\1\173\11\11\4\0\1\11\1\0\1\11\7\0"+
    "\1\11\13\0\2\11\6\0\4\11\4\0\5\11\1\174"+
    "\3\11\1\175\12\11\4\0\1\11\1\0\1\11\7\0"+
    "\1\11\13\0\2\11\6\0\4\11\4\0\16\11\1\176"+
    "\5\11\4\0\1\11\1\0\1\11\7\0\1\11\13\0"+
    "\2\11\6\0\4\11\4\0\11\11\1\177\12\11\4\0"+
    "\1\11\1\0\1\11\7\0\1\11\13\0\2\11\6\0"+
    "\4\11\4\0\12\11\1\200\11\11\4\0\1\11\1\0"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\15\11\1\201\6\11\4\0\1\11\1\0\1\11\7\0"+
    "\1\11\13\0\2\11\6\0\4\11\4\0\12\11\1\202"+
    "\11\11\4\0\1\11\1\0\1\11\7\0\1\11\13\0"+
    "\2\11\6\0\4\11\4\0\16\11\1\203\5\11\4\0"+
    "\1\11\1\0\1\11\7\0\1\11\13\0\2\11\6\0"+
    "\4\11\4\0\17\11\1\204\4\11\4\0\1\11\1\0"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\22\11\1\205\1\11\4\0\1\11\1\0\1\11\7\0"+
    "\1\11\13\0\2\11\6\0\4\11\4\0\11\11\1\206"+
    "\12\11\4\0\1\11\1\0\1\11\7\0\1\11\13\0"+
    "\2\11\6\0\4\11\4\0\17\11\1\207\4\11\4\0"+
    "\1\11\1\0\1\11\7\0\1\11\13\0\2\11\6\0"+
    "\4\11\4\0\7\11\1\210\14\11\4\0\1\11\1\0"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\15\11\1\211\6\11\4\0\1\11\1\0\1\11\7\0"+
    "\1\11\13\0\2\11\6\0\4\11\4\0\20\11\1\212"+
    "\2\11\1\213\4\0\1\11\1\0\1\11\7\0\1\11"+
    "\13\0\2\11\6\0\4\11\4\0\14\11\1\214\7\11"+
    "\4\0\1\11\1\0\1\11\7\0\1\11\13\0\2\11"+
    "\6\0\4\11\4\0\15\11\1\215\6\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\7\11\1\216\14\11\4\0\1\11\32\0\1\217"+
    "\44\0\70\220\1\0\5\220\16\105\1\162\4\105\1\221"+
    "\52\105\24\0\2\163\101\0\1\222\44\0\1\11\7\0"+
    "\1\11\13\0\2\11\6\0\4\11\4\0\1\223\23\11"+
    "\4\0\1\11\1\0\1\11\7\0\1\11\13\0\2\11"+
    "\6\0\4\11\4\0\4\11\1\224\17\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\2\11\1\225\21\11\4\0\1\11\1\0\1\11"+
    "\7\0\1\11\13\0\2\11\6\0\4\11\4\0\16\11"+
    "\1\226\5\11\4\0\1\11\1\0\1\11\7\0\1\11"+
    "\13\0\2\11\6\0\4\11\4\0\1\227\23\11\4\0"+
    "\1\11\1\0\1\11\7\0\1\11\13\0\2\11\6\0"+
    "\4\11\4\0\4\11\1\230\17\11\4\0\1\11\1\0"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\4\11\1\231\17\11\4\0\1\11\1\0\1\11\7\0"+
    "\1\11\13\0\2\11\6\0\4\11\4\0\16\11\1\232"+
    "\5\11\4\0\1\11\1\0\1\11\7\0\1\11\13\0"+
    "\2\11\6\0\4\11\4\0\1\233\23\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\2\11\1\234\21\11\4\0\1\11\1\0\1\11"+
    "\7\0\1\11\13\0\2\11\6\0\4\11\4\0\17\11"+
    "\1\235\4\11\4\0\1\11\1\0\1\11\7\0\1\11"+
    "\13\0\2\11\6\0\4\11\4\0\11\11\1\236\12\11"+
    "\4\0\1\11\1\0\1\11\7\0\1\11\13\0\2\11"+
    "\6\0\4\11\4\0\20\11\1\237\3\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\17\11\1\240\4\11\4\0\1\11\1\0\1\11"+
    "\7\0\1\11\13\0\2\11\6\0\4\11\4\0\13\11"+
    "\1\241\10\11\4\0\1\11\1\0\1\11\7\0\1\11"+
    "\13\0\2\11\6\0\4\11\4\0\4\11\1\242\17\11"+
    "\4\0\1\11\1\0\1\11\7\0\1\11\13\0\2\11"+
    "\6\0\4\11\4\0\4\11\1\243\17\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\11\11\1\244\12\11\4\0\1\11\1\0\1\11"+
    "\7\0\1\11\13\0\2\11\6\0\4\11\4\0\10\11"+
    "\1\245\13\11\4\0\1\11\1\0\1\11\7\0\1\11"+
    "\13\0\2\11\6\0\4\11\4\0\6\11\1\246\15\11"+
    "\4\0\1\11\1\0\1\11\7\0\1\11\13\0\2\11"+
    "\6\0\4\11\4\0\17\11\1\247\4\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\20\11\1\250\3\11\4\0\1\11\1\0\1\11"+
    "\7\0\1\11\13\0\2\11\6\0\4\11\4\0\17\11"+
    "\1\251\4\11\4\0\1\11\1\0\1\11\7\0\1\11"+
    "\13\0\2\11\6\0\4\11\4\0\4\11\1\252\17\11"+
    "\4\0\1\11\1\0\1\11\7\0\1\11\13\0\2\11"+
    "\6\0\4\11\4\0\11\11\1\253\12\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\17\11\1\254\4\11\4\0\1\11\1\0\1\11"+
    "\7\0\1\11\13\0\2\11\6\0\4\11\4\0\1\255"+
    "\23\11\4\0\1\11\1\0\1\11\7\0\1\11\13\0"+
    "\2\11\6\0\4\11\4\0\15\11\1\256\6\11\4\0"+
    "\1\11\1\0\1\11\7\0\1\11\13\0\2\11\6\0"+
    "\4\11\4\0\2\11\1\257\21\11\4\0\1\11\1\0"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\22\11\1\260\1\11\4\0\1\11\1\0\1\11\7\0"+
    "\1\11\13\0\2\11\6\0\4\11\4\0\13\11\1\261"+
    "\10\11\4\0\1\11\1\0\1\11\7\0\1\11\13\0"+
    "\2\11\6\0\4\11\4\0\4\11\1\262\17\11\4\0"+
    "\1\11\1\0\1\11\7\0\1\11\13\0\2\11\6\0"+
    "\4\11\4\0\11\11\1\263\12\11\4\0\1\11\1\0"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\4\11\1\264\17\11\4\0\1\11\1\0\1\11\7\0"+
    "\1\11\13\0\2\11\6\0\4\11\4\0\11\11\1\265"+
    "\12\11\4\0\1\11\1\0\1\11\7\0\1\11\13\0"+
    "\2\11\6\0\4\11\4\0\7\11\1\266\14\11\4\0"+
    "\1\11\1\0\1\11\7\0\1\11\13\0\2\11\6\0"+
    "\4\11\4\0\12\11\1\267\11\11\4\0\1\11\1\0"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\12\11\1\270\11\11\4\0\1\11\1\0\1\11\7\0"+
    "\1\11\13\0\2\11\6\0\4\11\4\0\6\11\1\271"+
    "\15\11\4\0\1\11\1\0\1\11\7\0\1\11\13\0"+
    "\2\11\6\0\4\11\4\0\5\11\1\272\16\11\4\0"+
    "\1\11\1\0\1\11\7\0\1\11\13\0\2\11\6\0"+
    "\4\11\4\0\17\11\1\273\4\11\4\0\1\11\1\0"+
    "\1\11\7\0\1\11\13\0\2\11\6\0\4\11\4\0"+
    "\23\11\1\274\4\0\1\11\1\0\1\11\7\0\1\11"+
    "\13\0\2\11\6\0\4\11\4\0\13\11\1\275\10\11"+
    "\4\0\1\11\1\0\1\11\7\0\1\11\13\0\2\11"+
    "\6\0\4\11\4\0\2\11\1\276\21\11\4\0\1\11"+
    "\1\0\1\11\7\0\1\11\13\0\2\11\6\0\4\11"+
    "\4\0\12\11\1\277\11\11\4\0\1\11\1\0\1\11"+
    "\7\0\1\11\13\0\2\11\6\0\4\11\4\0\4\11"+
    "\1\300\17\11\4\0\1\11\1\0\1\11\7\0\1\11"+
    "\13\0\2\11\6\0\4\11\4\0\13\11\1\301\10\11"+
    "\4\0\1\11\1\0\1\11\7\0\1\11\13\0\2\11"+
    "\6\0\4\11\4\0\5\11\1\302\16\11\4\0\1\11"+
    "\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\11\1\2\11\2\1\1\11\5\1\2\11\4\1"+
    "\2\11\1\1\1\11\16\1\1\11\1\1\2\11\1\1"+
    "\1\0\2\11\1\1\2\11\1\1\2\11\1\1\5\11"+
    "\1\0\3\1\1\11\1\0\3\1\1\11\1\1\2\11"+
    "\1\1\2\11\27\1\1\11\1\1\1\0\5\11\1\0"+
    "\1\1\3\11\30\1\4\11\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
ArrayDeque<Integer> kkStack;
void kkPush() { if (kkStack == null) kkStack = new ArrayDeque<>(); kkStack.push(yystate()); }
int kkPop() { return kkStack.pop(); }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return WS;
            }
          // fall through
          case 96: break;
          case 2:
            { return WS_LF;
            }
          // fall through
          case 97: break;
          case 3:
            { return NOT;
            }
          // fall through
          case 98: break;
          case 4:
            { return D_STRING;
            }
          // fall through
          case 99: break;
          case 5:
            { return IDENT;
            }
          // fall through
          case 100: break;
          case 6:
            { return PERCENT;
            }
          // fall through
          case 101: break;
          case 7:
            { return AMP;
            }
          // fall through
          case 102: break;
          case 8:
            { return S_STRING;
            }
          // fall through
          case 103: break;
          case 9:
            { return L_PAREN;
            }
          // fall through
          case 104: break;
          case 10:
            { return R_PAREN;
            }
          // fall through
          case 105: break;
          case 11:
            { return STAR;
            }
          // fall through
          case 106: break;
          case 12:
            { return PLUS;
            }
          // fall through
          case 107: break;
          case 13:
            { return COMMA;
            }
          // fall through
          case 108: break;
          case 14:
            { return MINUS;
            }
          // fall through
          case 109: break;
          case 15:
            { return DOT;
            }
          // fall through
          case 110: break;
          case 16:
            { return SLASH;
            }
          // fall through
          case 111: break;
          case 17:
            { return NUMBER;
            }
          // fall through
          case 112: break;
          case 18:
            { return COLON;
            }
          // fall through
          case 113: break;
          case 19:
            { return SEMI;
            }
          // fall through
          case 114: break;
          case 20:
            { return LT;
            }
          // fall through
          case 115: break;
          case 21:
            { return EQ;
            }
          // fall through
          case 116: break;
          case 22:
            { return GT;
            }
          // fall through
          case 117: break;
          case 23:
            { return QUES;
            }
          // fall through
          case 118: break;
          case 24:
            { return L_BRACKET;
            }
          // fall through
          case 119: break;
          case 25:
            { return R_BRACKET;
            }
          // fall through
          case 120: break;
          case 26:
            { return CARET;
            }
          // fall through
          case 121: break;
          case 27:
            { kkPush(); yybegin(TEMPLATE); return BACKTICK;
            }
          // fall through
          case 122: break;
          case 28:
            { return L_CURLY;
            }
          // fall through
          case 123: break;
          case 29:
            { return PIPE;
            }
          // fall through
          case 124: break;
          case 30:
            { return R_CURLY;
            }
          // fall through
          case 125: break;
          case 31:
            { return TILDE;
            }
          // fall through
          case 126: break;
          case 32:
            { return T_STRING;
            }
          // fall through
          case 127: break;
          case 33:
            { yybegin(kkPop()); return BACKTICK;
            }
          // fall through
          case 128: break;
          case 34:
            { yybegin(kkPop()); return R_CURLY;
            }
          // fall through
          case 129: break;
          case 35:
            { return NOT_EQ;
            }
          // fall through
          case 130: break;
          case 36:
            { return PERCENT_EQ;
            }
          // fall through
          case 131: break;
          case 37:
            { return AMP_AMP;
            }
          // fall through
          case 132: break;
          case 38:
            { return AMP_EQ;
            }
          // fall through
          case 133: break;
          case 39:
            { return STAR_STAR;
            }
          // fall through
          case 134: break;
          case 40:
            { return STAR_EQ;
            }
          // fall through
          case 135: break;
          case 41:
            { return PLUS_PLUS;
            }
          // fall through
          case 136: break;
          case 42:
            { return PLUS_EQ;
            }
          // fall through
          case 137: break;
          case 43:
            { return MINUS_MINUS;
            }
          // fall through
          case 138: break;
          case 44:
            { return MINUS_EQ;
            }
          // fall through
          case 139: break;
          case 45:
            { return B_COMMENT;
            }
          // fall through
          case 140: break;
          case 46:
            { return L_COMMENT;
            }
          // fall through
          case 141: break;
          case 47:
            { return SLASH_EQ;
            }
          // fall through
          case 142: break;
          case 48:
            { return LT_LT;
            }
          // fall through
          case 143: break;
          case 49:
            { return LT_EQ;
            }
          // fall through
          case 144: break;
          case 50:
            { return EQ_EQ;
            }
          // fall through
          case 145: break;
          case 51:
            { return EQ_GT;
            }
          // fall through
          case 146: break;
          case 52:
            { return GT_EQ;
            }
          // fall through
          case 147: break;
          case 53:
            { return GT_GT;
            }
          // fall through
          case 148: break;
          case 54:
            { return QUES_QUES;
            }
          // fall through
          case 149: break;
          case 55:
            { return CARET_EQ;
            }
          // fall through
          case 150: break;
          case 56:
            { return DO;
            }
          // fall through
          case 151: break;
          case 57:
            { return IF;
            }
          // fall through
          case 152: break;
          case 58:
            { return IN;
            }
          // fall through
          case 153: break;
          case 59:
            { return OF;
            }
          // fall through
          case 154: break;
          case 60:
            { return PIPE_EQ;
            }
          // fall through
          case 155: break;
          case 61:
            { return PIPE_PIPE;
            }
          // fall through
          case 156: break;
          case 62:
            { kkPush(); yybegin(PLACEHOLDER); return DOLLAR_L_CURLY;
            }
          // fall through
          case 157: break;
          case 63:
            { return NOT_EQ_EQ;
            }
          // fall through
          case 158: break;
          case 64:
            { return AMP_AMP_EQ;
            }
          // fall through
          case 159: break;
          case 65:
            { return STAR_STAR_EQ;
            }
          // fall through
          case 160: break;
          case 66:
            { return DOT_DOT_DOT;
            }
          // fall through
          case 161: break;
          case 67:
            { return LT_LT_EQ;
            }
          // fall through
          case 162: break;
          case 68:
            { return EQ_EQ_EQ;
            }
          // fall through
          case 163: break;
          case 69:
            { return GT_GT_EQ;
            }
          // fall through
          case 164: break;
          case 70:
            { return GT_GT_GT;
            }
          // fall through
          case 165: break;
          case 71:
            { return FOR;
            }
          // fall through
          case 166: break;
          case 72:
            { return LET;
            }
          // fall through
          case 167: break;
          case 73:
            { return NEW;
            }
          // fall through
          case 168: break;
          case 74:
            { return TRY;
            }
          // fall through
          case 169: break;
          case 75:
            { return VAR;
            }
          // fall through
          case 170: break;
          case 76:
            { return PIPE_PIPE_EQ;
            }
          // fall through
          case 171: break;
          case 77:
            { return GT_GT_GT_EQ;
            }
          // fall through
          case 172: break;
          case 78:
            { return CASE;
            }
          // fall through
          case 173: break;
          case 79:
            { return ELSE;
            }
          // fall through
          case 174: break;
          case 80:
            { return NULL;
            }
          // fall through
          case 175: break;
          case 81:
            { return TRUE;
            }
          // fall through
          case 176: break;
          case 82:
            { return BREAK;
            }
          // fall through
          case 177: break;
          case 83:
            { return CATCH;
            }
          // fall through
          case 178: break;
          case 84:
            { return CONST;
            }
          // fall through
          case 179: break;
          case 85:
            { return FALSE;
            }
          // fall through
          case 180: break;
          case 86:
            { return THROW;
            }
          // fall through
          case 181: break;
          case 87:
            { return WHILE;
            }
          // fall through
          case 182: break;
          case 88:
            { return DELETE;
            }
          // fall through
          case 183: break;
          case 89:
            { return RETURN;
            }
          // fall through
          case 184: break;
          case 90:
            { return SWITCH;
            }
          // fall through
          case 185: break;
          case 91:
            { return TYPEOF;
            }
          // fall through
          case 186: break;
          case 92:
            { return DEFAULT;
            }
          // fall through
          case 187: break;
          case 93:
            { return FINALLY;
            }
          // fall through
          case 188: break;
          case 94:
            { return FUNCTION;
            }
          // fall through
          case 189: break;
          case 95:
            { return INSTANCEOF;
            }
          // fall through
          case 190: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
